#!/usr/bin/env python 
__author__ = "Patrik Lundin" 
__copyright__ = "Copyright 2018, nothisispatrik.com" 
__license__ = "GPL v3. Algorithms/constants may be (C) 2014-2018 The Monero project or (C) 2012-2014 The Cryptonote Developers. All code is original"
__email__ = "patrik@nothisispatrik.com"
__status__ = "Prototype"
__doc__ = """Keccak hash"""

def keccak(inp):
    """Calculate keccak hash.

    Takes 200b (as a list of bytes) and returns 200b.

    Ex:
    print keccak([0]*200)

    # [231, 221, 225, 64, 121, 143, 37, 241, 138, 71, 192, 51, 249, 204, 213, 132, 238, 169, 90, 166, 30, 38, 152, 213, 77, 73, 128, 111, 48, 71, 21, 189, 87, 208, 83, 98, 5, 78, 40, 139, 212, 111, 142, 127, 45, 164, 151, 255, 196, 71, 70, 164, 160, 229, 254, 144, 118, 46, 25, 214, 12, 218, 91, 140, 156, 5, 25, 27, 247, 166, 48, 173, 100, 252, 143, 208, 183, 90, 147, 48, 53, 214, 23, 35, 63, 169, 90, 235, 3, 33, 113, 13, 38, 230, 166, 169, 95, 85, 207, 219, 22, 124, 165, 129, 38, 200, 71, 3, 205, 49, 184, 67, 159, 86, 165, 17, 26, 47, 242, 1, 97, 174, 217, 33, 90, 99, 229, 5, 242, 112, 201, 140, 242, 254, 190, 100, 17, 102, 196, 123, 149, 112, 54, 97, 203, 14, 208, 79, 85, 90, 124, 184, 200, 50, 207, 28, 138, 232, 62, 140, 20, 38, 58, 174, 34, 121, 12, 148, 228, 9, 197, 162, 36, 249, 65, 24, 194, 101, 4, 231, 38, 53, 245, 22, 59, 161, 48, 127, 233, 68, 246, 117, 73, 162, 236, 92, 123, 255, 241, 234]

    """
    def rol(b,n):
        return ((b<<n) & 0xffffffffffffffff) | (b>>(64-n))

    s = [sum(a[i]<<(i<<3) for i in range(8)) for a in [inp[i:i+8] for i in xrange(0,200,8)]]

    xo = [ 0x0000000000000001, 0x0000000000008082, 0x800000000000808a,
        0x8000000080008000, 0x000000000000808b, 0x0000000080000001,
        0x8000000080008081, 0x8000000000008009, 0x000000000000008a,
        0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080, 
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008 ]

    ro = [ 1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14, 
           27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44 ]

    pn = [ 10, 7,  11, 17, 18, 3, 5,  16, 8,  21, 24, 4, 
           15, 23, 19, 13, 12, 2, 20, 14, 22, 9,  6,  1 ]

    for r in xrange(24):
        b0 = s[0]^s[5]^s[10]^s[15]^s[20]
        b1 = s[1]^s[6]^s[11]^s[16]^s[21]
        b2 = s[2]^s[7]^s[12]^s[17]^s[22]
        b3 = s[3]^s[8]^s[13]^s[18]^s[23]
        b4 = s[4]^s[9]^s[14]^s[19]^s[24]

        t = b4 ^ rol(b1,1)
        s[0] ^=t ; s[5] ^=t ; s[10] ^=t ; s[15] ^=t ; s[20] ^=t
        t = b0 ^ rol(b2,1)
        s[1] ^=t ; s[6] ^=t ; s[11] ^=t ; s[16] ^=t ; s[21] ^=t
        t = b1 ^ rol(b3,1)
        s[2] ^=t ; s[7] ^=t ; s[12] ^=t ; s[17] ^=t ; s[22] ^=t
        t = b2 ^ rol(b4,1)
        s[3] ^=t ; s[8] ^=t ; s[13] ^=t ; s[18] ^=t ; s[23] ^=t
        t = b3 ^ rol(b0,1)
        s[4] ^=t ; s[9] ^=t ; s[14] ^=t ; s[19] ^=t ; s[24] ^=t

        t = s[1]
        for i in xrange(24):
            j = pn[i]
            t2 = s[j]
            s[j] = rol(t, ro[i])
            t = t2

        for j in xrange(0,24,5):
            b0 = s[j    ];
            b1 = s[j + 1];
            b2 = s[j + 2];
            b3 = s[j + 3];
            b4 = s[j + 4];
            s[j    ] ^= (b1^0xffffffffffffffff) & b2;
            s[j + 1] ^= (b2^0xffffffffffffffff) & b3;
            s[j + 2] ^= (b3^0xffffffffffffffff) & b4;
            s[j + 3] ^= (b4^0xffffffffffffffff) & b0;
            s[j + 4] ^= (b0^0xffffffffffffffff) & b1;

        s[0] ^= xo[r]

    return [int((t>>n)&255) for t in s for n in range(0,64,8)]

